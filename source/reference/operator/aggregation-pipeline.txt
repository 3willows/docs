===========================
Pipeline Aggregation Stages
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/extracts/operators-toc-explanation.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :pipeline:`$collStats`

     - Returns statistics regarding a collection or view.
   

   * - :pipeline:`$project`

     - Reshapes each document in the stream, such as by adding new fields or
       removing existing fields. For each input document, outputs one
       document.
   

   * - :pipeline:`$match`

     - Filters the document stream to allow only matching documents
       to pass unmodified into the next pipeline stage. :pipeline:`$match`
       uses standard MongoDB queries. For each input document, outputs
       either one document (a match) or zero documents (no match).
   

   * - :pipeline:`$redact`

     - Reshapes each document in the stream by restricting the content for
       each document based on information stored in the documents
       themselves. Incorporates the functionality of :pipeline:`$project`
       and :pipeline:`$match`. Can be used to implement field level
       redaction. For each input document, outputs either one or zero
       documents.
   

   * - :pipeline:`$limit`

     - Passes the first *n* documents unmodified to the pipeline
       where *n* is the specified limit. For each input document, outputs
       either one document (for the first *n* documents) or zero documents
       (after the first *n* documents).
   

   * - :pipeline:`$skip`

     - Skips the first *n* documents where *n* is the specified skip number
       and passes the remaining documents unmodified to the pipeline. For
       each input document, outputs either zero documents (for the first *n*
       documents) or one document (if after the first *n* documents).
   

   * - :pipeline:`$unwind`

     - Deconstructs an array field from the input documents to output a
       document for *each* element. Each output document replaces the array
       with an element value. For each input document, outputs *n* documents
       where *n* is the number of array elements and can be zero for an
       empty array.
   

   * - :pipeline:`$group`

     - Groups input documents by a specified identifier expression and
       applies the accumulator expression(s), if specified, to each group.
       Consumes all input documents and outputs one document per each
       distinct group. The output documents only contain the identifier
       field and, if specified, accumulated fields.
   

   * - :pipeline:`$sample`

     - Randomly selects the specified number of documents from its input.
   

   * - :pipeline:`$sort`

     - Reorders the document stream by a specified sort key. Only the order
       changes; the documents remain unmodified. For each input document,
       outputs one document.
   

   * - :pipeline:`$geoNear`

     - .. include:: /includes/extracts/geoNear-stage-toc-description.rst
   

   * - :pipeline:`$lookup`

     - Performs a left outer join to another collection in the *same*
       database to filter in documents from the "joined" collection for
       processing.
   

   * - :pipeline:`$out`

     - Writes the resulting documents of the aggregation pipeline to a
       collection. To use the :pipeline:`$out` stage, it must be the last
       stage in the pipeline.
   

   * - :pipeline:`$indexStats`

     - Returns statistics regarding the use of each index for the
       collection.
   

   * - :pipeline:`$facet`

     - Processes multiple :ref:`aggregation pipelines
       <aggregation-pipeline>` within a single stage on the same set of
       input documents. Enables the creation of multi-faceted
       aggregations capable of characterizing data across multiple
       dimensions, or facets, in a single stage.
   

   * - :pipeline:`$bucket`

     - Categorizes incoming documents into groups, called buckets, based on
       a specified expression and bucket boundaries.
   

   * - :pipeline:`$bucketAuto`

     - Categorizes incoming documents into a specific number of groups,
       called buckets, based on a specified expression. Bucket
       boundaries are automatically determined in an attempt to evenly
       distribute the documents into the specified number of buckets.
   

   * - :pipeline:`$sortByCount`

     - Groups incoming documents based on the value of a specified
       expression, then computes the count of documents in each distinct
       group.
   

   * - :pipeline:`$addFields`

     - Adds new fields to documents. Outputs documents that
       contain all existing fields from the input documents and newly
       added fields.
   

   * - :pipeline:`$replaceRoot`

     - Replaces a document with the specified embedded document. The
       operation replaces all existing fields in the input document,
       including the ``_id`` field. Specify a document embedded in the
       input document to promote the embedded document to the top level.
   

   * - :pipeline:`$count`

     - Returns a count of the number of documents at this stage of the
       aggregation pipeline.
   

   * - :pipeline:`$graphLookup`

     - Performs a recursive search on a collection. To each output document,
       adds a new array field that contains the traversal results of the
       recursive search for that document.
   


.. toctree::
   :titlesonly: 
   :hidden: 

   /reference/operator/aggregation/collStats
   /reference/operator/aggregation/project
   /reference/operator/aggregation/match
   /reference/operator/aggregation/redact
   /reference/operator/aggregation/limit
   /reference/operator/aggregation/skip
   /reference/operator/aggregation/unwind
   /reference/operator/aggregation/group
   /reference/operator/aggregation/sample
   /reference/operator/aggregation/sort
   /reference/operator/aggregation/geoNear
   /reference/operator/aggregation/lookup
   /reference/operator/aggregation/out
   /reference/operator/aggregation/indexStats
   /reference/operator/aggregation/facet
   /reference/operator/aggregation/bucket
   /reference/operator/aggregation/bucketAuto
   /reference/operator/aggregation/sortByCount
   /reference/operator/aggregation/addFields
   /reference/operator/aggregation/replaceRoot
   /reference/operator/aggregation/count
   /reference/operator/aggregation/graphLookup
