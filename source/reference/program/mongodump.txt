.. _mongodump:

=============
``mongodump``
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |tool-binary| replace:: mongodump

Synopsis
--------

:binary:`~bin.mongodump` is a utility for creating a binary export of the
contents of a database. Consider using this utility as part of an
effective :doc:`backup strategy </core/backups>`. Use
:binary:`~bin.mongodump` in conjunction with :binary:`~bin.mongorestore` to
restore databases.

:binary:`~bin.mongodump` can read data from either :binary:`~bin.mongod` or :binary:`~bin.mongos`
instances, in addition to reading directly from MongoDB data files
without an active :binary:`~bin.mongod`.

.. seealso:: :binary:`~bin.mongorestore`,
   :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
   and :doc:`/core/backups`.

Behavior
--------

.. include:: /includes/fact-mongodump-local-database.rst

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

When running :binary:`~bin.mongodump` against a :binary:`~bin.mongos` instance
where the :term:`sharded cluster` consists of :term:`replica sets <replica
set>`, the :term:`read preference` of the operation will prefer reads
from :term:`secondary` members of the set.

.. include:: /includes/warning-fsync-lock-mongodump.rst

.. include:: /includes/fact-mongodump-overwrite-files.rst

Required Access
---------------

Backup Collections
~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-mongodump-collections.rst

Backup Users
~~~~~~~~~~~~

.. include:: /includes/access-mongodump-users.rst

Options
-------

.. binary:: mongodump

.. program:: mongodump

.. option:: --help

   Returns information on the options and use of :program:`mongodump`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs the :program:`mongodump` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events
   


.. option:: --version

   Returns the :program:`mongodump` release number.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongodump` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the :setting:`replica set name
   <~replication.replSetName>` and a seed list of set members. Use the
   following form:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   


.. option:: --ipv6

   Enables IPv6 support and allows the :program:`mongodump` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   
   .. include:: /includes/warning-always-use-sslCAFile-for-mongo.rst
   


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.weakCertificateValidation`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongodump` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongodump` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongodump` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password`` and
   ``--authenticationDatabase`` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username`` and
   ``--authenticationDatabase`` options.
   
   If you do not specify an argument for :option:`--password`, :program:`mongodump` will
   prompt interactively for a password on the console.


.. option:: --authenticationDatabase <dbname>

   If you do not specify an authentication database, :program:`mongodump`
   assumes that the database specified to export holds the user's credentials.


.. option:: --authenticationMechanism <name>

   *Default*: MONGODB-CR

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   Specifies the authentication mechanism the :program:`mongodump` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - MONGODB-CR
   
        - MongoDB challenge/response authentication.
   
      * - MONGODB-X509
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - PLAIN
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.
   
      * - GSSAPI
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. The :option:`--dbpath` option
   lets the :program:`mongodump` attach directly to the local data files without
   going through a running :binary:`~bin.mongod`. When run with :option:`--dbpath`, the
   :program:`mongodump` locks access to the data files. No :binary:`~bin.mongod` can
   access the files while the :program:`mongodump` process runs.


.. option:: --directoryperdb

   When used in conjunction with the corresponding option in
   :binary:`~bin.mongod`, allows the :program:`mongodump` to access data from MongoDB
   instances that use an on-disk format where every database has a distinct
   directory. This option is only relevant when specifying the
   :option:`--dbpath` option.


.. option:: --journal

   Enables the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   . The :program:`mongodump` enables journaling by default
   on 64-bit builds of versions after 2.0.


.. option:: --db <database>, -d <database>

   Specifies a database to backup. If you do not specify a database,
   :binary:`~bin.mongodump` copies all databases in this instance into the dump
   files.
   


.. option:: --collection <collection>, -c <collection>

   Specifies a collection to backup. If you do not specify a collection,
   this option copies all collections in the specified database or instance
   to the dump files.
   


.. option:: --out <path>, -o <path>

   Specifies the directory where :binary:`~bin.mongodump` will write
   :term:`BSON` files for the dumped databases. By default,
   :binary:`~bin.mongodump` saves output files in a directory named
   ``dump`` in the current working directory.
   
   To send the database dump to standard output, specify "``-``" instead of
   a path. Write to standard output if you want process the output before
   saving it, such as to use ``gzip`` to compress the dump. When writing
   standard output, :binary:`~bin.mongodump` does not write the metadata that
   writes in a ``<dbname>.metadata.json`` file when writing to files
   directly.
   


.. option:: --query <json>, -q <json>

   Provides a :term:`JSON document` as a query that optionally limits the
   documents included in the output of :binary:`~bin.mongodump`.
   


.. option:: --oplog

   Creates a file named :file:`oplog.bson` as part of the
   :binary:`~bin.mongodump` output. The :file:`oplog.bson` file, located in
   the top level of the output directory, contains oplog entries that
   occur during the :binary:`~bin.mongodump` operation. This file provides
   an effective point-in-time snapshot of the state of a
   :binary:`~bin.mongod` instance. To restore to a specific point-in-time
   backup, use the output created with this option in conjunction with
   :option:`mongorestore --oplogReplay`.
   
   Without :option:`--oplog`, if there are write operations during the dump
   operation, the dump will not reflect a single moment in time. Changes
   made to the database during the update process can affect the output of
   the backup.
   
   :option:`--oplog` has no effect when running :binary:`~bin.mongodump`
   against a :binary:`~bin.mongos` instance to dump the entire contents of a
   sharded cluster. However, you can use :option:`--oplog` to dump
   individual shards.
   
   :option:`--oplog` only works against nodes that maintain an
   :term:`oplog`. This includes all members of a replica set, as well as
   :term:`master` nodes in master/slave replication deployments.
   
   :option:`--oplog` does not dump the oplog collection.


.. option:: --repair

   Runs a repair option in addition to dumping the
   database. :option:`--repair` operates directly on the database files. As such,
   you must use the :option:`--dbpath` option when using :option:`--repair`.
   The repair option attempts to repair a database that may be in
   an invalid state as a result of an improper shutdown or
   :binary:`~bin.mongod` crash.
   
   The :option:`--repair` option uses aggressive data-recovery algorithms
   that may produce a large amount of duplication.


.. option:: --forceTableScan

   Forces :binary:`~bin.mongodump` to scan the data store directly: typically,
   :binary:`~bin.mongodump` saves entries as they appear in the index of
   the ``_id`` field. If you specify a query :option:`--query`,
   :program:`mongodump` will use the most appropriate index to support that query.
   
   Use :option:`--forceTableScan` to skip the index and scan the data directly. Typically
   there are two cases where this behavior is preferable to the
   default:
   
   1. If you have key sizes over 800 bytes that would not be present in the
      ``_id`` index.
   
   2. Your database uses a custom ``_id`` field.
   
   When you run with :option:`--forceTableScan`, :binary:`~bin.mongodump` does
   not use :operator:`$snapshot`. As a result, the dump produced by
   :binary:`~bin.mongodump` can reflect the state of the database at many
   different points in time.
   
   .. important:: Use :option:`--forceTableScan` with extreme caution and
      consideration.


.. option:: --dumpDbUsersAndRoles

   Includes user and role definitions in the database's dump directory
   when performing :binary:`~bin.mongodump` on a specific database. This
   option applies only when you specify a database in the
   :option:`--db` option. MongoDB always includes user and role
   definitions when :binary:`~bin.mongodump` applies to an entire instance
   and not just a specific database.
   


Use
---

See the :doc:`/tutorial/backup-with-mongodump`
for a larger overview of :binary:`~bin.mongodump` usage. Also see the
:doc:`mongorestore` document for an overview of the
:binary:`~bin.mongorestore`, which provides the related inverse
functionality.

The following command creates a dump file that contains only the
collection named ``collection`` in the database named ``test``. In
this case the database is running on the local interface on port
``27017``:

.. code-block:: sh

   mongodump  --db test --collection collection

In the next example, :binary:`~bin.mongodump` creates a backup of the
database instance stored in the ``/srv/mongodb`` directory on the
local machine. This requires that no :binary:`~bin.mongod` instance is
using the ``/srv/mongodb`` directory.

.. code-block:: sh

   mongodump --dbpath /srv/mongodb

In the final example, :binary:`~bin.mongodump` creates a database dump
located at ``/opt/backup/mongodump-2011-10-24``, from a database
running on port ``37017`` on the host ``mongodb1.example.net`` and
authenticating using the username ``user`` and the password
``pass``, as follows:

.. code-block:: sh

   mongodump --host mongodb1.example.net --port 37017 --username user --password pass --out /opt/backup/mongodump-2011-10-24

.. _mongodump-behavior:
