.. _mongoimport:

===============
``mongoimport``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongoimport

Synopsis
--------

The :binary:`~bin.mongoimport` tool imports content from an
:doc:`Extended JSON </reference/mongodb-extended-json>`, CSV, or TSV export
created by :binary:`~bin.mongoexport`, or potentially, another third-party export
tool. See the :doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoexport` document for more
information regarding :binary:`~bin.mongoexport`, which
provides the inverse "exporting" capability.

Considerations
--------------

Do not use :binary:`~bin.mongoimport` and :binary:`~bin.mongoexport` for
full instance, production backups because they will not reliably capture data type
information. Use :binary:`~bin.mongodump` and :binary:`~bin.mongorestore` as
described in :doc:`/core/backups` for this kind of
functionality.

:binary:`~bin.mongoimport` is single-threaded and inserts one document at
a time into MongoDB. Custom import tools for data ingestion may have
better performance for specific workloads.

Options
-------

.. binary:: mongoimport

.. program:: mongoimport

.. option:: --help

   Returns information on the options and use of :program:`mongoimport`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs the :program:`mongoimport` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events
   


.. option:: --version

   Returns the :program:`mongoimport` release number.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongoimport` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the :setting:`replica set name
   <~replication.replSetName>` and a seed list of set members. Use the
   following form:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   


.. option:: --ipv6

   Enables IPv6 support and allows the :program:`mongoimport` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   
   .. include:: /includes/warning-always-use-sslCAFile-for-mongo.rst
   


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.weakCertificateValidation`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongoimport` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongoimport` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongoimport` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password`` and
   ``--authenticationDatabase`` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username`` and
   ``--authenticationDatabase`` options.
   
   If you do not specify an argument for :option:`--password`, :program:`mongoimport` will
   prompt interactively for a password on the console.


.. option:: --authenticationDatabase <dbname>

   .. versionadded:: 2.4
   
   Specifies the database that holds the user's credentials.   
   


.. option:: --authenticationMechanism <name>

   *Default*: MONGODB-CR

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   Specifies the authentication mechanism the :program:`mongoimport` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - MONGODB-CR
   
        - MongoDB challenge/response authentication.
   
      * - MONGODB-X509
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - PLAIN
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.
   
      * - GSSAPI
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. The :option:`--dbpath` option
   lets the :program:`mongoimport` attach directly to the local data files without
   going through a running :binary:`~bin.mongod`. When run with :option:`--dbpath`, the
   :program:`mongoimport` locks access to the data files. No :binary:`~bin.mongod` can
   access the files while the :program:`mongoimport` process runs.


.. option:: --directoryperdb

   When used in conjunction with the corresponding option in
   :binary:`~bin.mongod`, allows the :program:`mongoimport` to access data from MongoDB
   instances that use an on-disk format where every database has a distinct
   directory. This option is only relevant when specifying the
   :option:`--dbpath` option.


.. option:: --journal

   Enables the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   . The :program:`mongoimport` enables journaling by default
   on 64-bit builds of versions after 2.0.


.. option:: --db <database>, -d <database>

   Specifies the name of the database on which to run the :program:`mongoimport`.


.. option:: --collection <collection>, -c <collection>

   Specifies the collection to import.
   
   .. versionadded:: 2.6
      If you do not specify :option:`--collection`,
      :binary:`~bin.mongoimport` takes the collection name from the input
      filename. MongoDB omits the extension of the file from the
      collection name, if the input file has an extension.


.. option:: --fields <field1[,field2]>, -f <field1[,field2]>

   Specify a comma separated list of field names when importing :term:`csv`
   or :term:`tsv` files that do not have field names in the first (i.e.
   header) line of the file.
   


.. option:: --fieldFile <filename>

   As an alternative to :option:`--fields`, the :option:`--fieldFile`
   option allows you to specify a file that holds a list of field names if
   your :term:`csv` or :term:`tsv` file does not include field names in the
   first line of the file (i.e. header). Place one field per line.


.. option:: --ignoreBlanks

   Ignores empty fields in :term:`csv` and :term:`tsv` exports. If not
   specified, :binary:`~bin.mongoimport` creates fields without values in
   imported documents.
   


.. option:: --type <json|csv|tsv>

   Specifies the file type to import. The default format is :term:`JSON`,
   but it's possible to import :term:`csv` and :term:`tsv` files.
   
   The ``csv`` parser accepts that data that complies with RFC
   :rfc:`4180`. As a result, backslashes are *not* a valid escape
   character. If you use double-quotes to enclose fields in the CSV
   data, you must escape internal double-quote marks by prepending
   another double-quote.
   


.. option:: --file <filename>

   Specifies the location and name of a file containing the data to import.
   If you do not specify a file, :binary:`~bin.mongoimport` reads data from
   standard input (e.g. "stdin").
   


.. option:: --drop

   Modifies the import process so that the target instance drops
   the collection before importing the data from the input.
   


.. option:: --headerline

   If using :option:`--type csv <mongoimport --type>` or :option:`--type
   tsv <mongoimport --type>`, uses the first line as field names.
   Otherwise, :binary:`~bin.mongoimport` will import the first line as a
   distinct document.
   


.. option:: --upsert

   Modifies the import process to update existing objects in the
   database if they match an imported object, while inserting all
   other objects.
   
   If you do not specify a field or fields using the
   :option:`--upsertFields` :binary:`~bin.mongoimport` will upsert on the
   basis of the ``_id`` field.
   


.. option:: --upsertFields <field1[,field2]>

   Specifies a list of fields for the query portion of the
   :term:`upsert`. Use this option if the ``_id`` fields in the
   existing documents don't match the field in the document, but
   another field or field combination can uniquely identify
   documents as a basis for performing upsert operations.
   
   To ensure adequate performance, indexes should exist for this
   field or fields.
   


.. option:: --stopOnError

   .. versionadded:: 2.2
   
   Forces :binary:`~bin.mongoimport` to halt the import operation at the
   first error rather than continuing the operation despite errors.
   


.. option:: --jsonArray

   Accepts the import of data expressed with multiple MongoDB documents
   within a single :term:`JSON` array. Limited to
   imports of 16 MB or smaller.
   
   Use :option:`--jsonArray` in conjunction with :option:`mongoexport --jsonArray`.


Use
---

In this example, :binary:`~bin.mongoimport` imports the :term:`csv`
formatted data in the ``/opt/backups/contacts.csv`` into the
collection ``contacts`` in the ``users`` database on the MongoDB
instance running on the localhost port numbered
``27017``. :binary:`~bin.mongoimport` determines the name of files using
the first line in the CSV file, because of the :option:`--headerline
<mongoimport --headerline>`:

.. code-block:: sh

   mongoimport --db users --collection contacts --type csv --headerline --file /opt/backups/contacts.csv

Since :binary:`~bin.mongoimport` uses the input file name, without the
extension, as the collection name if ``-c`` or ``--collection`` is
unspecified. The following example is equivalent:

.. code-block:: none

   mongoimport --db users --type csv --headerline --file /opt/backups/contacts.csv

In the following example, :binary:`~bin.mongoimport` imports the data in
the :term:`JSON` formatted file ``contacts.json`` into the collection
``contacts`` on the MongoDB instance running on the localhost port
number 27017.

.. code-block:: sh

   mongoimport --db users --collection contacts --file contacts.json

In the next example, :binary:`~bin.mongoimport` takes data passed to it on
standard input (i.e. with a ``|`` pipe.)  and imports it into the
MongoDB datafiles located at ``/srv/mongodb/``. if the import process
encounters an error, the :binary:`~bin.mongoimport` will halt because of
the :option:`--stopOnError <mongoimport --stopOnError>` option.

.. code-block:: sh

   mongoimport --db sales --collection contacts --stopOnError --dbpath /srv/mongodb/

In the final example, :binary:`~bin.mongoimport` imports data from the
file ``/opt/backups/mdb1-examplenet.json`` into the collection
``contacts`` within the database ``marketing`` on a remote MongoDB
database. This :binary:`~bin.mongoimport` accesses the :binary:`~bin.mongod`
instance running on the host ``mongodb1.example.net`` over port
``37017``, which requires the username ``user`` and the password
``pass``.

.. code-block:: sh

   mongoimport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --file /opt/backups/mdb1-examplenet.json

.. _mongoimport-type-fidelity:

Type Fidelity
-------------

.. include:: /includes/warning-type-fidelity-loss.rst

JSON can only represent a subset of the types supported by BSON. To
preserve type information, :binary:`~bin.mongoimport` accepts :doc:`strict
mode representation </reference/mongodb-extended-json>` for certain
types.

For example, to preserve type information for BSON types
:bsontype:`data_date` and :bsontype:`data_numberlong` during
:binary:`~bin.mongoimport`, the data should be in strict mode
representation, as in the following:

.. code-block:: javascript

   { "_id" : 1, "volume" : { "$numberLong" : "2980000" }, "date" : { "$date" : "2014-03-13T13:47:42.483-0400" } }

For the :bsontype:`data_numberlong` type, :binary:`~bin.mongoimport`
converts into a float during the import.

See :doc:`/reference/mongodb-extended-json` for a complete list of
these types and the representations used.
