.. _mongosniff:

==============
``mongosniff``
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Synopsis
--------

:binary:`~bin.mongosniff` provides a low-level operation tracing/sniffing view
into database activity in real time. Think of :binary:`~bin.mongosniff` as a
MongoDB-specific analogue of ``tcpdump`` for TCP/IP network
traffic. Typically, :binary:`~bin.mongosniff` is most frequently used in driver
development.

.. _mongosniff-libcap:

.. note::

   :binary:`~bin.mongosniff` requires ``libpcap`` and is only available for
   Unix-like systems.

As an alternative to :binary:`~bin.mongosniff`, Wireshark, a popular
network sniffing tool is capable of inspecting and parsing the MongoDB
wire protocol.

.. _mongosniff-options:

Options
-------

.. binary:: mongosniff

.. program:: mongosniff

.. option:: --help

   Returns information on the options and use of :program:`mongosniff`.


.. option:: --forward <host><:port>

   Declares a host to forward all parsed requests that the
   :program:`mongosniff` intercepts to another :binary:`~bin.mongod` instance
   and issue those operations on that database instance.
   
   Specify the target host name and port in the ``<host><:port>`` format.
   
   To connect to a replica set, specify the :setting:`replica set name
   <~replication.replSetName>` and a seed list of set members. Use the
   following form:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>


.. option:: --source <NET [interface]>, <FILE [filename]>, <DIAGLOG [filename]>

   Specifies source material to inspect. Use ``--source NET [interface]``
   to inspect traffic from a network interface (e.g. ``eth0`` or ``lo``.)
   Use ``--source FILE [filename]`` to read captured packets in
   :term:`pcap` format.
   


.. option:: --objcheck

   Displays invalid BSON objects only and nothing else. Use this option for
   troubleshooting driver development. This option has some performance
   impact on the performance of :program:`mongosniff`.


.. option:: <port>

   Specifies alternate ports to sniff for traffic. By default,
   :program:`mongosniff` watches for MongoDB traffic on port ``27017``. Append
   multiple port numbers to the end of :program:`mongosniff` to monitor
   traffic on multiple ports.


Use
---

Use the following command to connect to a :binary:`~bin.mongod` or
:binary:`~bin.mongos` running on port 27017 *and* 27018 on the localhost
interface:

.. code-block:: sh

   mongosniff --source NET lo 27017 27018

Use the following command to only log invalid :term:`BSON` objects for
the :binary:`~bin.mongod` or :binary:`~bin.mongos` running on the localhost
interface and port 27018, for driver development and troubleshooting:

.. code-block:: sh

   mongosniff --objcheck --source NET lo 27018

Build ``mongosniff``
--------------------

To build ``mongosniff`` yourself, Linux users can use the following
procedure:

1. Obtain prerequisites using your operating
   systems package management software. Dependencies include:

   - ``libpcap`` - to capture network packets.
   - ``git`` - to download the MongoDB source code.
   - ``scons`` and a C++ compiler - to build :binary:`~bin.mongosniff`.

2. Download a copy of the MongoDB source code using ``git``:

   .. code-block:: sh

      git clone git://github.com/mongodb/mongo.git

3. Issue the following sequence of commands to change to the
   ``mongo/`` directory and build :binary:`~bin.mongosniff`:

   .. code-block:: sh

      cd mongo
      scons mongosniff

.. note::

   If you run ``scons mongosniff`` before installing ``libpcap`` you
   must run ``scons clean`` before you can build :binary:`~bin.mongosniff`.
