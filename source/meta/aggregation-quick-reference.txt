.. ensure that the changes to this text are reflected in /reference/operator/aggregation.txt
.. ensure that the changes to this text are reflected in /meta/aggregation-quick-reference.txt
   with slight difference. Quick Reference contains information on different expressions,
   such as field paths, expression objects, etc.

====================================
Aggregation Pipeline Quick Reference
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/extracts/operators-toc-explanation.rst

Stages
------

In the :method:`db.collection.aggregate` method, pipeline stages appear
in an array. Documents pass through the stages in sequence. All except
the :pipeline:`$out` and :pipeline:`$geoNear` stages can appear
multiple times in a pipeline.

.. code-block:: javascript

   db.collection.aggregate( [ { <stage> }, ... ] )

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :pipeline:`$collStats`

     - Returns statistics regarding a collection or view.
   

   * - :pipeline:`$project`

     - Reshapes each document in the stream, such as by adding new fields or
       removing existing fields. For each input document, outputs one
       document.
   

   * - :pipeline:`$match`

     - Filters the document stream to allow only matching documents
       to pass unmodified into the next pipeline stage. :pipeline:`$match`
       uses standard MongoDB queries. For each input document, outputs
       either one document (a match) or zero documents (no match).
   

   * - :pipeline:`$redact`

     - Reshapes each document in the stream by restricting the content for
       each document based on information stored in the documents
       themselves. Incorporates the functionality of :pipeline:`$project`
       and :pipeline:`$match`. Can be used to implement field level
       redaction. For each input document, outputs either one or zero
       documents.
   

   * - :pipeline:`$limit`

     - Passes the first *n* documents unmodified to the pipeline
       where *n* is the specified limit. For each input document, outputs
       either one document (for the first *n* documents) or zero documents
       (after the first *n* documents).
   

   * - :pipeline:`$skip`

     - Skips the first *n* documents where *n* is the specified skip number
       and passes the remaining documents unmodified to the pipeline. For
       each input document, outputs either zero documents (for the first *n*
       documents) or one document (if after the first *n* documents).
   

   * - :pipeline:`$unwind`

     - Deconstructs an array field from the input documents to output a
       document for *each* element. Each output document replaces the array
       with an element value. For each input document, outputs *n* documents
       where *n* is the number of array elements and can be zero for an
       empty array.
   

   * - :pipeline:`$group`

     - Groups input documents by a specified identifier expression and
       applies the accumulator expression(s), if specified, to each group.
       Consumes all input documents and outputs one document per each
       distinct group. The output documents only contain the identifier
       field and, if specified, accumulated fields.
   

   * - :pipeline:`$sample`

     - Randomly selects the specified number of documents from its input.
   

   * - :pipeline:`$sort`

     - Reorders the document stream by a specified sort key. Only the order
       changes; the documents remain unmodified. For each input document,
       outputs one document.
   

   * - :pipeline:`$geoNear`

     - .. include:: /includes/extracts/geoNear-stage-toc-description.rst
   

   * - :pipeline:`$lookup`

     - Performs a left outer join to another collection in the *same*
       database to filter in documents from the "joined" collection for
       processing.
   

   * - :pipeline:`$out`

     - Writes the resulting documents of the aggregation pipeline to a
       collection. To use the :pipeline:`$out` stage, it must be the last
       stage in the pipeline.
   

   * - :pipeline:`$indexStats`

     - Returns statistics regarding the use of each index for the
       collection.
   

   * - :pipeline:`$facet`

     - Processes multiple :ref:`aggregation pipelines
       <aggregation-pipeline>` within a single stage on the same set of
       input documents. Enables the creation of multi-faceted
       aggregations capable of characterizing data across multiple
       dimensions, or facets, in a single stage.
   

   * - :pipeline:`$bucket`

     - Categorizes incoming documents into groups, called buckets, based on
       a specified expression and bucket boundaries.
   

   * - :pipeline:`$bucketAuto`

     - Categorizes incoming documents into a specific number of groups,
       called buckets, based on a specified expression. Bucket
       boundaries are automatically determined in an attempt to evenly
       distribute the documents into the specified number of buckets.
   

   * - :pipeline:`$sortByCount`

     - Groups incoming documents based on the value of a specified
       expression, then computes the count of documents in each distinct
       group.
   

   * - :pipeline:`$addFields`

     - Adds new fields to documents. Outputs documents that
       contain all existing fields from the input documents and newly
       added fields.
   

   * - :pipeline:`$replaceRoot`

     - Replaces a document with the specified embedded document. The
       operation replaces all existing fields in the input document,
       including the ``_id`` field. Specify a document embedded in the
       input document to promote the embedded document to the top level.
   

   * - :pipeline:`$count`

     - Returns a count of the number of documents at this stage of the
       aggregation pipeline.
   

   * - :pipeline:`$graphLookup`

     - Performs a recursive search on a collection. To each output document,
       adds a new array field that contains the traversal results of the
       recursive search for that document.
   


.. _aggregation-expressions:

Expressions
-----------

Expressions can include :ref:`field paths and system variables
<agg-quick-ref-field-paths>`, :ref:`literals <agg-quick-ref-literals>`,
:ref:`expression objects <agg-quick-ref-expression-objects>`, and
:ref:`expression operators <agg-quick-ref-operator-expressions>`.
Expressions can be nested.

.. _agg-quick-ref-field-paths:

Field Path and System Variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aggregation expressions use :term:`field path` to access fields in the
input documents. To specify a field path, use a string that prefixes
with a dollar sign ``$`` the field name or the dotted field name, if
the field is in embedded document. For example, ``"$user"`` to specify
the field path for the ``user`` field or ``"$user.name"`` to specify
the field path to ``"user.name"`` field.

``"$<field>"`` is equivalent to ``"$$CURRENT.<field>"`` where the
:variable:`CURRENT` is a system variable that defaults to the root of
the current object in the most stages, unless stated otherwise in
specific stages. :variable:`CURRENT` can be rebound.

Along with the :variable:`CURRENT` system variable, other :ref:`system
variables <agg-system-variables>` are also available for use in
expressions. To use user-defined variables, use :expression:`$let` and
:expression:`$map` expressions. To access variables in expressions, use
a string that prefixes the variable name with ``$$``.

.. _agg-quick-ref-literals:

Literals
~~~~~~~~

Literals can be of any type. However, MongoDB parses string literals
that start with a dollar sign ``$`` as a path to a field and
numeric/boolean literals in :ref:`expression objects
<agg-quick-ref-expression-objects>` as projection flags. To avoid
parsing literals, use the :expression:`$literal` expression.

.. _agg-quick-ref-expression-objects:

Expression Objects
~~~~~~~~~~~~~~~~~~

Expression objects have the following form:

.. code-block:: javascript

   { <field1>: <expression1>, ... }

If the expressions are numeric or boolean literals, MongoDB treats the
literals as projection flags (e.g. ``1`` or ``true`` to include the
field), valid only in the :pipeline:`$project` stage. To avoid treating
numeric or boolean literals as projection flags, use the
:expression:`$literal` expression to wrap the numeric or boolean
literals.

.. _agg-quick-ref-operator-expressions:

Operator Expressions
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/intro-aggregation-operator-expressions.rst

Boolean Expressions
```````````````````

.. include:: /includes/intro-aggregation-boolean.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$and`

     - Returns ``true`` only when *all* its expressions evaluate to
       ``true``. Accepts any number of argument expressions.
   

   * - :expression:`$or`

     - Returns ``true`` when *any* of its expressions evaluates to ``true``.
       Accepts any number of argument expressions.
   

   * - :expression:`$not`

     - Returns the boolean value that is the opposite of its argument
       expression. Accepts a single argument expression.
   


Set Expressions
```````````````

.. include:: /includes/intro-aggregation-set.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$setEquals`

     - Returns ``true`` if the input sets have the same distinct elements.
       Accepts two or more argument expressions.
   

   * - :expression:`$setIntersection`

     - Returns a set with elements that appear in *all* of the input sets.
       Accepts any number of argument expressions.
   

   * - :expression:`$setUnion`

     - Returns a set with elements that appear in *any* of the input sets.
       Accepts any number of argument expressions.
   

   * - :expression:`$setDifference`

     - Returns a set with elements that appear in the first set but not in
       the second set; i.e. performs a
       `relative complement <http://en.wikipedia.org/wiki/Complement_(set_theory)>`_
       of the second set relative to the first. Accepts exactly two
       argument expressions.
   

   * - :expression:`$setIsSubset`

     - Returns ``true`` if all elements of the first set appear in the
       second set, including when the first set equals the second set; i.e.
       not a `strict subset <http://en.wikipedia.org/wiki/Subset>`_.
       Accepts exactly two argument expressions.
   

   * - :expression:`$anyElementTrue`

     - Returns ``true`` if *any* elements of a set evaluate to ``true``;
       otherwise, returns ``false``. Accepts a single argument expression.
   

   * - :expression:`$allElementsTrue`

     - Returns ``true`` if *no* element of a set evaluates to ``false``,
       otherwise, returns ``false``. Accepts a single argument expression.
   


Comparison Expressions
``````````````````````

.. include:: /includes/intro-aggregation-comparison.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$cmp`

     - Returns: ``0`` if the two values are
       equivalent, ``1`` if the first value is greater than the
       second, and ``-1`` if the first value is less than the
       second.
   

   * - :expression:`$eq`

     - Returns ``true`` if the values are
       equivalent.
   

   * - :expression:`$gt`

     - Returns ``true`` if the first value is
       greater than the second.
   

   * - :expression:`$gte`

     - Returns ``true`` if the first value is
       greater than or equal to the second.
   

   * - :expression:`$lt`

     - Returns ``true`` if the first value is less
       than the second.
   

   * - :expression:`$lte`

     - Returns ``true`` if the first value is less
       than or equal to the second.
   

   * - :expression:`$ne`

     - Returns ``true`` if the values are *not*
       equivalent.
   


Arithmetic Expressions
``````````````````````

.. include:: /includes/intro-aggregation-arithmetic.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$abs`

     - Returns the absolute value of a number.

   * - :expression:`$add`

     - Adds numbers to return the sum, or adds numbers and a date to return
       a new date. If adding numbers and a date, treats the numbers as
       milliseconds. Accepts any number of argument expressions, but at
       most, one expression can resolve to a date.
   

   * - :expression:`$ceil`

     - Returns the smallest integer greater than or equal to the specified number.
   

   * - :expression:`$divide`

     - Returns the result of dividing the first number by the second. Accepts
       two argument expressions.
   

   * - :expression:`$exp`

     - Raises *e* to the specified exponent.

   * - :expression:`$floor`

     - Returns the largest integer less than or equal to the specified number.
   

   * - :expression:`$ln`

     - Calculates the natural log of a number.

   * - :expression:`$log`

     - Calculates the log of a number in the specified base.

   * - :expression:`$log10`

     - Calculates the log base 10 of a number.

   * - :expression:`$mod`

     - Returns the remainder of the first number divided by the second.
       Accepts two argument expressions.
   

   * - :expression:`$multiply`

     - Multiplies numbers to return the product. Accepts any number of
       argument expressions.
   

   * - :expression:`$pow`

     - Raises a number to the specified exponent.

   * - :expression:`$sqrt`

     - Calculates the square root.
   

   * - :expression:`$subtract`

     - Returns the result of subtracting the second value from the first. If
       the two values are numbers, return the difference. If the two values
       are dates, return the difference in milliseconds. If the two values
       are a date and a number in milliseconds, return the resulting date.
       Accepts two argument expressions. If the two values are a date and a
       number, specify the date argument first as it is not meaningful to
       subtract a date from a number.
   

   * - :expression:`$trunc`

     - Truncates a number to its integer.


String Expressions
``````````````````

.. |exp-has| replace:: String expressions, with the exception of
   :expression:`$concat`, only have

.. include:: /includes/intro-aggregation-string.rst

:expression:`$concat` behavior is well-defined regardless of the
characters used.

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$concat`

     - Concatenates any number of strings.
   

   * - :expression:`$indexOfBytes`

     - Searches a string for an occurence of a substring and returns the
       UTF-8 byte index of the first occurence. If the substring is not
       found, returns ``-1``.
   

   * - :expression:`$indexOfCP`

     - Searches a string for an occurence of a substring and returns the
       UTF-8 code point index of the first occurence. If the
       substring is not found, returns ``-1``.
   

   * - :expression:`$split`

     - Splits a string into substrings based on a delimiter. Returns an
       array of substrings. If the delimiter is not found within the string,
       returns an array containing the original string.
   

   * - :expression:`$strLenBytes`

     - Returns the number of UTF-8 encoded bytes in a string.
   

   * - :expression:`$strLenCP`

     - Returns the number of UTF-8 `code points
       <http://www.unicode.org/glossary/#code_point>`_ in a string.
   

   * - :expression:`$strcasecmp`

     - Performs case-insensitive string comparison and returns: ``0`` if two
       strings are equivalent, ``1`` if the first string is greater than the
       second, and ``-1`` if the first string is less than the second.
   

   * - :expression:`$substr`

     - Deprecated. Use :expression:`$substrBytes` or :expression:`$substrCP`.
   

   * - :expression:`$substrBytes`

     - Returns the substring of a string. Starts with the
       character at the specified UTF-8 byte index (zero-based) in the string
       and continues for the specified number of bytes.
   

   * - :expression:`$substrCP`

     - Returns the substring of a string. Starts with the
       character at the specified UTF-8 `code point (CP)
       <http://www.unicode.org/glossary/#code_point>`_ index (zero-based)
       in the string and continues for the number of code points specified.
   

   * - :expression:`$toLower`

     - Converts a string to lowercase. Accepts a single argument expression.
   

   * - :expression:`$toUpper`

     - Converts a string to uppercase. Accepts a single argument expression.
   


Text Search Expressions
```````````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$meta`

     - Access text search metadata.
   


Array Expressions
`````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$arrayElemAt`

     - Returns the element at the specified array index.
   

   * - :expression:`$arrayToObject`

     - Converts an array of key value pairs to a document.
   

   * - :expression:`$concatArrays`

     - Concatenates arrays to return the concatenated array.
   

   * - :expression:`$filter`

     - Selects a subset of the array to return an array with only the elements
       that match the filter condition.
   

   * - :expression:`$in`

     - Returns a boolean indicating whether a specified value is in an array.
   

   * - :expression:`$indexOfArray`

     - Searches an array for an occurence of a specified value and returns
       the array index of the first occurence. If the substring is not found,
       returns ``-1``.
   

   * - :expression:`$isArray`

     - Determines if the operand is an array. Returns a boolean.
   

   * - :expression:`$map`

     - Applies a subexpression to each element of an array and returns the
       array of resulting values in order. Accepts named parameters.
   

   * - :expression:`$objectToArray`

     - Converts a document to an array of documents representing key-value pairs.
   

   * - :expression:`$range`

     - Outputs an array containing a sequence of integers according to
       user-defined inputs.
   

   * - :expression:`$reduce`

     - Applies an expression to each element in an array and combines them
       into a single value.
   

   * - :expression:`$reverseArray`

     - Returns an array with the elements in reverse order.
   

   * - :expression:`$size`

     - Returns the number of elements in the array. Accepts a single
       expression as argument.
   

   * - :expression:`$slice`

     - Returns a subset of an array.
   

   * - :expression:`$zip`

     - Merge two arrays together.
   


Variable Expressions
````````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$let`

     - Defines variables for use within the scope of a subexpression and
       returns the result of the subexpression. Accepts named parameters.
   


Literal Expressions
```````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$literal`

     - Return a value without parsing. Use for values that the aggregation
       pipeline may interpret as an expression. For example, use a
       :expression:`$literal` expression to a string that starts with a
       ``$`` to avoid parsing as a field path.
   


Data Type Expressions
`````````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$type`

     - Return the BSON data type of the field.
   


Date Expressions
````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$dayOfYear`

     - Returns the day of the year for a date as a number between 1 and 366
       (leap year).
   

   * - :expression:`$dayOfMonth`

     - Returns the day of the month for a date as a number between 1 and 31.
   

   * - :expression:`$dayOfWeek`

     - Returns the day of the week for a date as a number between 1 (Sunday)
       and 7 (Saturday).
   

   * - :expression:`$year`

     - Returns the year for a date as a number (e.g. 2014).
   

   * - :expression:`$month`

     - Returns the month for a date as a number between 1
       (January) and 12 (December).
   

   * - :expression:`$week`

     - Returns the week number for a date as a number between 0 (the partial
       week that precedes the first Sunday of the year) and 53 (leap year).
   

   * - :expression:`$hour`

     - Returns the hour for a date as a number between 0 and 23.
   

   * - :expression:`$minute`

     - Returns the minute for a date as a number between 0 and 59.
   

   * - :expression:`$second`

     - Returns the seconds for a date as a number between 0 and 60
       (leap seconds).
   

   * - :expression:`$millisecond`

     - Returns the milliseconds of a date as a number between 0
       and 999.
   

   * - :expression:`$dateToString`

     - Returns the date as a formatted string.
   

   * - :expression:`$isoDayOfWeek`

     - Returns the weekday number in ISO 8601 format, ranging from
       ``1`` (for Monday) to ``7`` (for Sunday).
   

   * - :expression:`$isoWeek`

     - Returns the week number in ISO 8601 format, ranging
       from ``1`` to ``53``. Week
       numbers start at ``1`` with the week (Monday through Sunday)
       that contains the year's first Thursday.
   

   * - :expression:`$isoWeekYear`

     - Returns the year number in ISO 8601 format. The year starts
       with the Monday of week 1 (ISO 8601) and ends with the Sunday of the
       last week (ISO 8601).
   


Conditional Expressions
```````````````````````

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :expression:`$cond`

     - A ternary operator that evaluates one expression, and depending on
       the result, returns the value of one of the other two expressions.
       Accepts either three expressions in an ordered list or three named
       parameters.
   

   * - :expression:`$ifNull`

     - Returns either the non-null result of the first expression or the
       result of the second expression if the first expression results in a
       null result. Null result encompasses instances of undefined values or
       missing fields. Accepts two expressions as arguments. The result of
       the second expression can be null.
   

   * - :expression:`$switch`

     - Evaluates a series of case expressions. When it finds an expression
       which evaluates to ``true``, ``$switch`` executes a specified
       expression and breaks out of the control flow.
   


.. _agg-quick-reference-accumulators:

Accumulators
------------

.. include:: /includes/intro-aggregation-accumulator.rst

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :group:`$sum`

     - Returns a sum of numerical values. Ignores non-numeric values.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

   * - :group:`$avg`

     - Returns an average of numerical values. Ignores non-numeric values.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

   * - :group:`$first`

     - Returns a value from the first document for each group. Order is
       only defined if the documents are in a defined order.
   
       Available in :pipeline:`$group` stage only.
   

   * - :group:`$last`

     - Returns a value from the last document for each group. Order is
       only defined if the documents are in a defined order.
   
       Available in :pipeline:`$group` stage only.
   

   * - :group:`$max`

     - Returns the highest expression value for each group.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

   * - :group:`$min`

     - Returns the lowest expression value for each group.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

   * - :group:`$push`

     - Returns an array of expression values for each group.
   
       Available in :pipeline:`$group` stage only.
   

   * - :group:`$addToSet`

     - Returns an array of *unique* expression values for each group. Order of the
       array elements is undefined.
   
       Available in :pipeline:`$group` stage only.
   

   * - :group:`$stdDevPop`

     - Returns the population standard deviation of the input values.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

   * - :group:`$stdDevSamp`

     - Returns the sample standard deviation of the input values.
   
       .. versionchanged:: 3.2
          Available in both :pipeline:`$group` and :pipeline:`$project`
          stages.
   

