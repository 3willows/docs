.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: queryable encryption, in-use encryption, client-side field level encryption

.. _about-qe-csfle:

======================================
Choosing an In-Use Encryption Approach
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB provides two approaches to :term:`In-Use Encryption`:
:ref:`{+qe+} <qe-manual-feature-qe>` and :ref:`{+csfle+} <manual-csfle-feature>` 
({+csfle-abbrev+}). When using either approach, you can also choose
between automatic and {+manual-enc+}.

About {+qe+} and {+csfle-abbrev+}
------------------------------------------------------------------------

Both {+qe+} and {+csfle+} ({+csfle-abbrev+}) enable a client application 
to encrypt data before transporting it over the network. Sensitive data is
transparently encrypted and decrypted by the client and only
communicated to and from the server in encrypted form.

For more information, see :ref:`{+qe+} Features <qe-features>` and 
:ref:`{+csfle-abbrev+} Features <csfle-features>`.

Querying Encrypted Fields
~~~~~~~~~~~~~~~~~~~~~~~~~
{+qe+} supports equality queries on encrypted fields. 
Support for ranged queries is upcoming, and support for prefix, suffix, 
and substring queries with {+qe+} is under development.

{+csfle+} supports equality queries on deterministically encrypted fields.

For more information about supported query operators, see :ref:`Supported Query
Operators for {+qe+} <qe-supported-query-operators>` and
:ref:`Supported Query Operators for {+csfle-abbrev+}
<csfle-supported-query-operators>`. For the full list of MongoDB query
operators, see :ref:`query-projection-operators-top`.

Encryption Algorithms
~~~~~~~~~~~~~~~~~~~~~

The new encryption algorithm for {+qe+} uses randomized encryption based on
structured encryption, which produces different encrypted output values
from the same input. This prevents attackers from reverse-engineering
the encryption.

For detailed information on MongoDB's approach to {+qe+}, see the
`Overview of {+qe+}
<https://cdn.bfldr.com/2URK6TO/as/64kp46t53v34xw37gkngbrg/An_Overview_of_Queryable_Encryption>`__
and
`Design and Analysis of a Stateless
Document Database Encryption Scheme <https://cdn.bfldr.com/2URK6TO/as/jkwp857q2zr8fj5vqs24f5/Design__Analysis_Stateless_Document_Database_Encryption_Scheme>`__ whitepapers.

The {+csfle-abbrev+} encryption algorithm supports both randomized
encryption and :ref:`deterministic encryption
<csfle-deterministic-encryption>`. However, it only supports 
**querying** fields that are encrypted deterministically.

With deterministic encryption, a given input value always encrypts to 
the same output value. Deterministic encryption is suitable for high 
:term:`cardinality` data. If a field has many potential unique values,
such as street addresses, then it is difficult for potential attackers 
to reverse engineer encrypted values to plaintext. Conversely, if a 
field has very few values, like sex, then attackers can reasonably guess 
them and use that information to help to decipher the cryptographic 
algorithm.

Using {+qe+} and {+csfle-abbrev+}
------------------------------------------------------------------------
You can use {+qe+}, {+csfle+}, or both in your application. However,
you can't use both approaches in the same collection. 

Consider using {+qe+} in the following scenarios: 

- You are developing a new application and want to use the latest
  cryptographic advancements from MongoDB.
- You expect users to run ranged, prefix, suffix, or substring queries
  against encrypted data.
- Your application can use a single key for a given field, rather than
  requiring separate keys on a per-user or per-tenant basis.
- You value read performance over storage requirements. {+qe+} generates 
  internal :ref:`metadata collections <qe-metadata-collections>` and 
  indexes to improve query performance. As a result, a collection
  encrypted with {+qe+} uses 2-4 times the storage space that it would
  if it were plaintext or encrypted with {+csfle-abbrev+}.

There are situations where {+csfle-abbrev+} may be a preferable solution:

- Your application already uses {+csfle-abbrev+}.
- You need to use different keys for the same field. This is commonly 
  encountered when separating tenants or using user-specific keys.
- You need to be flexible with your data schema and potentially add more
  encrypted fields. Adding encrypted fields for {+qe+}
  requires rebuilding metadata collections and indexes.
- The increased storage requirements of {+qe+} are a concern.
- Your company or industry prefers mature products over emerging
  technologies.

Compatibility
~~~~~~~~~~~~~
{+qe+} and {+csfle+} are compatible with different MongoDB server and
driver versions. Both {+qe+} and {+csfle-abbrev+} are supported for the 
foreseeable future. For details, see :ref:`Compatibility
<qe-csfle-compatibility>`.

Private Querying
~~~~~~~~~~~~~~~~

MongoDB encrypts queries for both {+qe+} and {+csfle+} so that the
server has no information on cleartext document or query values. 
With {+qe+}, private querying goes a step further and redacts logs and 
metadata to scrub information around the query's existence. This ensures 
stronger privacy and confidentiality.

Limitations
~~~~~~~~~~~

For the limitations of each approach, see :ref:`{+qe+} limitations
<qe-reference-encryption-limits>` or :ref:`{+csfle-abbrev+} limitations
<csfle-reference-encryption-limits>`.

Choosing Between Automatic and {+manual-enc-title+}
---------------------------------------------------------

Using Automatic Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~
We recommend automatic encryption in most situations, as it streamlines
the process of writing your client application. With automatic
encryption, MongoDB automatically encrypts and decrypts fields in read
and write operations.

Using {+manual-enc-title+}
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/queryable-encryption/qe-csfle-manual-enc-overview.rst

For details, see :ref:`{+manual-enc-title+} with {+qe+}
<qe-fundamentals-manual-encryption>` or :ref:`{+manual-enc-title+} with {+csfle-abbrev+} <csfle-fundamentals-manual-encryption>`.